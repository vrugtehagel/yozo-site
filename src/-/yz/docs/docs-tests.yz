<title>docs-tests</title>
<meta attribute=suitepath type=string>

<template mode=closed>
	<div id=sandbox></div>
	<ui-icon type=pulse></ui-icon>
	<ul id=short-results .hidden="!$.suite">
		<li #for="status of $.statuses" :class="status"></li>
	</ul>
	<div id=info>
		<ui-icon type=spinner #if="$.step == 'loading'"></ui-icon>
		<ui-button icon=play aria-label="Run tests" #else-if="$.step == 'pending'"
			@click="$.suite.run()"></ui-button>
		<ui-icon type=spinner #else-if="$.step == 'running'"></ui-icon>
		<ui-dropdown :icon="$.step == 'failed' ? 'fail' : 'success'"
			.hidden="$.step.endsWith('ing')">
			<slot></slot>
		</ui-dropdown>
	</div>
</template>

<script>
import('/-/js/test-suite/index.js').then(mod => $.TestSuite = mod.TestSuite)
const slot = query('slot')

live.link($.$slotted, {
	get: () => slot.assignedNodes(),
	changes: when(slot).slotchanges()
})
live.link($.$suite, () => {
	if(!$.TestSuite) return null
	const tests = $.slotted.filter(node => node.localName == 'docs-test')
	const filenames = tests.map(test => test.getAttribute('filename'))
	return new $.TestSuite($.suitepath, filenames)
})
live.link($.$statuses, () => Array.from($.suite?.$state.statuses ?? []))
live.link($.$step, () => $.suite?.$state.result ?? 'loading')

effect(async () => {
	const { $settings } = await until(import('/-/js/site-settings/index.js'))
	if($settings.runTests) $.suite?.run()
})

effect(() => {
	const slotted = $.slotted.filter(node => node.localName == 'docs-test')
	for(const [index, element] of slotted.entries())
		element.status = $.$statuses[index]
})

effect(() => {
	if(!$.suite) return
	const sandbox = query('#sandbox')
	sandbox.replaceChildren($.suite.iframe)
})
</script>

<style>
:host {
	display: inline-flex;
	align-items: center;
}
#sandbox {
	width: 1px; height: 1px;
	position: fixed; inset: 0 auto auto 0; z-index: 1001;
	border: none;
	opacity: .1;
	overflow: clip;
}
ui-icon[type=pulse]{ color: var(--comment-color); }
ui-button:hover { background-color: var(--background-color); }
#short-results {
	list-style: none;
	display: flex; height: 1.5rem;
	padding: .75rem .5rem .75rem .25rem; margin: 0;
	gap: .375rem;
	&[hidden]{ display: none; }
	li {
		width: .375rem;
		color: transparent;
		overflow: clip;
		border-radius: 1rem;
	}
	.pending { background-color: var(--highlight-color); }
	.running { background-color: var(--comment-color); }
	.failed { background-color: var(--error-color); }
	.success { background-color: var(--primary-color); }
}
#info {
	& > [hidden] { display: none; }
	ui-icon {
		display: block;
	}
	ui-dropdown {
		&::part(dropdown){
			width: min(100vw - 6rem, 720px - 3rem); max-height: min(30rem, 60vh);
			padding: .25rem 0; box-sizing: border-box;
			inset: 3.75rem -0.5rem auto auto; z-index: 1;
			overflow: auto;
			background-color: var(--sub-background-color);
			border: .75rem solid var(--background-color); border-radius: 2rem;
		}
		&::part(button):hover { background-color: var(--background-color); }
		&[icon=success]::part(button){ color: var(--primary-color); }
		&[icon=fail]::part(button){ color: var(--error-color); }
	}
}
</style>
