<title>ui-icode</title>
<meta attribute=type type=string default="js">

<template mode=closed><code></code></template>

<script>
import('/-/js/site-settings/index.js').then(mod => $.siteSettings = mod)

const code = query('code')
const uiSyntaxHighlight = document.createElement('ui-syntax-highlight')

const custom = {
	url: text => code.innerHTML = `<span class=url>${text}</span>`,
	str: text => code.innerHTML = `<span class=string>${text}</span>`,
	arg: text => {
		const hasSpread = text.startsWith('...')
		const parameter = hasSpread ? text.slice(3) : text
		const parameterSpan = `<span class=parameter>${parameter}</span>`
		if(!hasSpread) return code.innerHTML = parameterSpan
		code.innerHTML = `<span class=keyword>...</span>${parameterSpan}`
	},
	tag: text => code.innerHTML = `<span class=keyword>${text}</span>`,
	attr: text => {
		const [full, name, value] = text.match(/^([^=]*)(?:=([^]*))?$/)
		const nameSpan = `<span class=primary>${name}</span>`
		if(!value) return code.innerHTML = nameSpan
		code.innerHTML = `${nameSpan}=<span class=string>${value}</span>`
	},
	sel: text => code.innerHTML = text,
	yzattr: text => {
		const [full, name, quote, value] = text
			.match(/^([^=]*)(?:=(['"]?)([^]*)\2)?$/)
		const nameSpan = `<span class="primary">${name}</span>`
		if(!quote && !value) return code.innerHTML = nameSpan
		const quoteSpan = `<span class="string">${quote}</span>`
		code.innerHTML = `${nameSpan}=${quoteSpan}${quoteSpan}`
		uiSyntaxHighlight.language = 'js'
		uiSyntaxHighlight.value = value
		uiSyntaxHighlight.textContent = value
		code.lastElementChild.before(uiSyntaxHighlight)
	},
}

live.link($.$content, {
	get: () => this.textContent,
	changes: when(this).observes('mutation', {childList: true, characterData: true, subtree: true})
})

connected(() => effect(() => {
	const content = $.content?.trim() ?? ''
	const highlight = custom[$.type]
	if(highlight) return highlight(content)
	uiSyntaxHighlight.language = $.type
	uiSyntaxHighlight.value = content
	uiSyntaxHighlight.textContent = content
	code.replaceChildren(uiSyntaxHighlight)
}))
</script>

<style>
code { font-family: inherit; }

.string, .url { color: var(--string-color); }
.parameter { color: var(--parameter-color); }
.keyword { color: var(--keyword-color); }
.primary { color: var(--primary-color); }
</style>
